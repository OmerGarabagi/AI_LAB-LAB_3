# -------------------------------------------------
# Iterated Local Search with Simulated‑Annealing core
# -------------------------------------------------
def ils_sa(
    coords: list[tuple[float, float]],
    demands: list[int],
    capacity: int,
    n_iters: int = 20,
    inner_moves: int = 150,
    T0: float = 100.0,
    alpha: float = 0.90,
    seed: Optional[int] = None,
) -> Solution:
    """
    ILS‑SA workflow:
        1. Initial solution = greedy_nearest_neighbor.
        2. Repeat n_iters times:
             a. Perturb best solution by random customer swap.
             b. Run Simulated Annealing local search with geometric cooling.
             c. Accept if improved.
    SA specifics:
        • Neighborhood = single inter‑route swap.
        • Acceptance: always if Δ<0 else prob = exp(‑Δ/T).
        • Temperature schedule: T <- alpha*T after each accepted move
          (reset to T0 for every outer iteration).
    Complexity: O(n_iters · inner_moves · n²) (swap eval is O(1)).
    """
    rng = random.Random(seed)

    # ---- helper copies & swap ----
    def copy_solution(sol: Solution) -> Solution:
        return Solution([Route(nodes=r.nodes[:]) for r in sol.routes])

    def random_inter_swap(sol: Solution):
        cust = []
        for r_idx, r in enumerate(sol.routes):
            for n_idx in range(1, len(r.nodes) - 1):
                cust.append((r_idx, n_idx))
        if len(cust) < 2:
            return False
        (r1, i1), (r2, i2) = rng.sample(cust, 2)
        if r1 == r2:
            return False
        sol.routes[r1].nodes[i1], sol.routes[r2].nodes[i2] = (
            sol.routes[r2].nodes[i2],
            sol.routes[r1].nodes[i1],
        )
        return True

    def feasible(sol: Solution) -> bool:
        return all(r.load() <= capacity for r in sol.routes)

    # ---- SA local search ----
    def sa_search(start: Solution) -> Solution:
        cur = copy_solution(start)
        best = copy_solution(cur)
        cur_cost = best_cost = cur.total_distance()
        T = T0
        for _ in range(inner_moves):
            neigh = copy_solution(cur)
            if not random_inter_swap(neigh) or not feasible(neigh):
                continue
            delta = neigh.total_distance() - cur_cost
            if delta < 0 or rng.random() < math.exp(-delta / T):
                cur, cur_cost = neigh, neigh.total_distance()
                T *= alpha
                if cur_cost < best_cost:
                    best, best_cost = cur, cur_cost
        return best